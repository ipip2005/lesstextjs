{"version":3,"sources":["truncate.ts"],"names":[],"mappings":"AAsCA,0BAA0B,OAAkC;IAC1D,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;QAC5B,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACrD,CAAC;IAED,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,OAAO,CAAC,cAAc,CAAC;IAC5E,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;IAC9C,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,CAAC,CAAC;IAC7C,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,KAAK,CAAC;IAC7C,OAAO,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,IAAI,IAAI,CAAC;IAE9D,MAAM,CAAC,OAA2B,CAAC;AACrC,CAAC;AAED,MAAM,mBAAmB,UAAqC;IAC5D,IAAM,OAAO,GAAqB,gBAAgB,CAAC,UAAU,CAAC,CAAC;IAE/D,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,UAAU,GAAM,OAAO,CAAC,UAAU,OAAI,CAAC;IACpE,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,GAAG,YAAY,CAAC;IAErD,IAAM,SAAS,GAAW,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;AACpE,CAAC","file":"truncate.js","sourcesContent":["export interface ITruncateOptions {\r\n  monitorElement: HTMLElement;\r\n\r\n  /**\r\n   * @default monitorElement\r\n   */\r\n  scalableElement: HTMLElement;\r\n\r\n  /**\r\n   * The line-height value of the monitor element in pixels.\r\n   * @default [lineHeight=20]\r\n   */\r\n  lineHeight: number;\r\n\r\n  /**\r\n   * @default [linesCount=2]\r\n   */\r\n  linesCount: number;\r\n\r\n  /**\r\n   * Symbol to append to the truncated text.\r\n   * @default [omission='...']\r\n   */\r\n  omission: string;\r\n\r\n  /**\r\n   * Symbol/Regex used for spliting text when truncating text.\r\n   * @default [separator=undefined]\r\n   */\r\n  separator: string | undefined;\r\n\r\n  /**\r\n   * Whether the last word in the truncated text could be a broken down word or must be a complete word.\r\n   * @default [omissionBreakWord=true]\r\n   */\r\n  omissionBreakWord: boolean;\r\n}\r\n\r\nfunction normalizeOptions(options: Partial<ITruncateOptions>): ITruncateOptions {\r\n  if (!options.monitorElement) {\r\n    throw new Error('Monitor element cannot be empty');\r\n  }\r\n  \r\n  options.scalableElement = options.scalableElement || options.monitorElement;\r\n  options.lineHeight = options.lineHeight || 20;\r\n  options.linesCount = options.linesCount || 2;\r\n  options.omission = options.omission || '...';\r\n  options.omissionBreakWord = options.omissionBreakWord || true;\r\n\r\n  return options as ITruncateOptions;\r\n}\r\n\r\nexport function truncate(rawOptions: Partial<ITruncateOptions>): void {\r\n  const options: ITruncateOptions = normalizeOptions(rawOptions);\r\n\r\n  options.monitorElement.style.lineHeight = `${options.lineHeight}px`;\r\n  options.monitorElement.style.wordWrap = 'break-word';\r\n  \r\n  const maxHeight: number = options.lineHeight * options.linesCount;\r\n}\r\n"],"sourceRoot":"../src"}