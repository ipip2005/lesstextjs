{"version":3,"sources":["truncate.ts"],"names":[],"mappings":"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","file":"truncate.js","sourcesContent":["import { ITruncateOptions } from './ITruncateOptions';\r\nimport { TruncationResult } from './TruncationResult';\r\n\r\nfunction normalizeOptions(options: Partial<ITruncateOptions>): ITruncateOptions {\r\n  if (!options.monitorElement) {\r\n    throw new Error('Monitor element cannot be empty');\r\n  }\r\n\r\n  options.scalableElement = options.scalableElement || options.monitorElement;\r\n\r\n  if (options.lineHeight) {\r\n    options.lineHeight = options.lineHeight;\r\n  } else {\r\n    const originalLineHeight: string = window\r\n      .getComputedStyle(this._textContainerElement, undefined)\r\n      .getPropertyValue('line-height');\r\n\r\n    options.lineHeight = parseInt(originalLineHeight, 10);\r\n  }\r\n\r\n  options.linesCount = options.linesCount || 2;\r\n  options.omission = options.omission || '...';\r\n  options.omissionBreakWord = options.omissionBreakWord || true;\r\n  options.separator = options.separator || '';\r\n\r\n  return options as ITruncateOptions;\r\n}\r\n\r\nfunction getHeight(element: HTMLElement): number {\r\n  const contentStyles: CSSStyleDeclaration = window.getComputedStyle(element);\r\n  let padding: number = 0;\r\n  if (contentStyles && contentStyles.paddingTop && contentStyles.paddingBottom) {\r\n    padding = parseFloat(contentStyles.paddingTop) + parseFloat(contentStyles.paddingBottom);\r\n  }\r\n\r\n  return element.offsetHeight - padding;\r\n}\r\n\r\nfunction joinTextArray(textArray: string[], separator: string, omission: string): string {\r\n  return textArray.join(separator) + omission;\r\n}\r\n\r\nexport function truncate(rawOptions: Partial<ITruncateOptions>): Promise<TruncationResult> {\r\n  const options: ITruncateOptions = normalizeOptions(rawOptions);\r\n\r\n  options.monitorElement.style.lineHeight = `${options.lineHeight}px`;\r\n  options.monitorElement.style.wordWrap = 'break-word';\r\n\r\n  const maxHeight: number = options.lineHeight * options.linesCount;\r\n\r\n  if (getHeight(options.monitorElement) <= maxHeight) { // Had enough space, skip truncating.\r\n    return Promise.resolve(TruncationResult.Skipped);\r\n  }\r\n\r\n  const truncatableText: string = options.scalableElement.textContent || '';\r\n\r\n  if (!truncatableText) { // Spcae is not enough, but there is no text can be truncated.\r\n    return Promise.resolve(TruncationResult.Failed);\r\n  }\r\n\r\n  const textArray: string[] = truncatableText\r\n    .split(options.separator)\r\n    .filter(text => text);\r\n\r\n  const allowedTextNumber: number = textArray.length;\r\n\r\n  let minTextNumber: number = 0, maxTextNumber: number = allowedTextNumber;\r\n\r\n  do {\r\n    const currentTextNumber: number = Math.floor((minTextNumber + maxTextNumber + 1) / 2);\r\n    const currentTruncatedText: string =\r\n      joinTextArray(textArray.slice(0, currentTextNumber - 1), options.separator, options.omission);\r\n    options.scalableElement.textContent = currentTruncatedText;\r\n\r\n    if (getHeight(options.monitorElement) > maxHeight) {\r\n      maxTextNumber = currentTextNumber - 1;\r\n    } else {\r\n      minTextNumber = currentTextNumber;\r\n    }\r\n  } while (minTextNumber < maxTextNumber);\r\n\r\n  if (minTextNumber === 0) { // We truncated everyting.\r\n    return Promise.resolve(TruncationResult.Failed);\r\n  } else {\r\n    return Promise.resolve(TruncationResult.Success);\r\n  }\r\n}\r\n"],"sourceRoot":"../src"}